 The ampersand, when combined with the variable name,
tells scanf the location (or address) in memory at which the variable integer1 is stored.
The computer then stores the value for integer1 at that location. 


 The ampersand, when combined with the variable name,
tells scanf the location (or address) in memory at which the variable integer1 is stored.
The computer then stores the value for integer1 at that location. 

C provides three types of repetition structures in the form of statements, namely
while (Section 3.7), do…while, and for (both discussed in Chapter 4). 

C has only seven control statements: sequence, three types of
selection and three types of repetition.

(s.61 i boken)
printf( "%s\n", grade >= 60 ? "Passed" : "Failed" );
grade >= 60 ? printf( "Passed\n" ) : printf( "Failed\n" );

%.2f innebär att två decimaler kommer skrivas ut.


Pre-increment operator is used to increment the value of variable before using in the expression. The Pre-Incremented value is first incremented and the used inside the expression.
b = ++y;

B. Post Increment Operator in C Programming :
Post-increment operator is used to increment the value of variable as soon as after executing expression completely in which post increment is used. The Post-Increment value is first used in a expression and then incremented.
b = x++;

There are two ways to invoke functions in many programming languages—call-by-value
and call-by-reference. When arguments are passed by value, a copy of the argument’s value
is made and passed to the called function. Changes to the copy do not affect an original variable’s value in the caller. When an argument is passed by reference, the caller allows the called function to modify the original variable’s value.
Call-by-value should be used whenever the called function does not need to modify the value of the caller’s original variable. This prevents the accidental side effects (variable
modifications) that so greatly hinder the development of correct and reliable software systems.
Call-by-reference should be used only with trusted called functions that need to modify the original variable. In C, all calls are by value.

A function’s local variables (those declared
in the parameter list or function body) normally have automatic storage duration.
Keyword auto explicitly declares variables of automatic storage duration. For example, the
following declaration indicates that double variables x and y are automatic local variables
and they exist only in the body of the function in which the declaration appears:

The compiler may ignore register declarations. For example, there may not be a sufficient
number of registers available for the compiler to use. The following declaration sugauto
gests that the integer variable counter be placed in one of the computer’s registers and
initialized to 1:

If the user types 20 or more characters, your program may crash! For this
reason, use the conversion specifier %19s so that scanf does not write characters into memory
beyond the end of the array s.

The following nested for statement determines the total of all the elements in array a:
total = 0;
for ( row = 0; row <= 2; row++ ) {
for ( column = 0; column <= 3; column++ ) {
total += a[ row ][ column ];
}
}

printf( "%d", *yPtr );
prints the value of variable y, namely 5. Using * in this manner is called dereferencing a
pointer.

There are four ways to pass a pointer to a function: a non-constant pointer to nonconstant
data, a constant pointer to nonconstant data, a non-constant pointer to constant
data, and a constant pointer to constant data. Each of the four combinations provides
different access privileges.

Using pointers to constant data in this manner is an example of a time/space tradeoff.
If memory is low and execution efficiency is a concern, use pointers. If memory is in
abundance and efficiency is not a major concern, pass data by value to enforce the principle
of least privilege. Remember that some systems do not enforce const well, so call-byvalue
is still the best way to prevent data from being modified.

Sizeof:
Variables of type float are normally stored in 4 bytes of memory, and array
is defined to have 20 elements. Therefore, there are a total of 80 bytes in array.

s.274 flytta pekaren mellan de olika elementen i en array.

För att komma åt första elementet: bPtr = b; samma som att skriva bPtr = &b[ 0 ]; eller *( bPtr + 3 ) eller bPtr[ 1 ]

För att komma åt tredje elementet: &b[ 3 ] eller bPtr + 3 eller *( b + 3 )

int (*compare)( int a, int b )
This tells bubble to expect a parameter (compare) that is a pointer to a function that receives
two integer parameters and returns an integer result. Parentheses are needed around
*compare to group * with compare to indicate that compare is a pointer. If we had not included
the parentheses, the declaration would have been
int *compare( int a, int b )
which declares a function that receives two integers as parameters and returns a pointer to
an integer.

So, it is possible that the user input could exceed 19 characters and that your
program might crash! For this reason, use the conversion specifier %19s so that scanf reads up to 19 characters and saves the last character for the terminating null character. This prevents
scanf from writing characters into memory beyond the end of s.

printf("%s",
	isalpha('2') ? "character is a digit" : "character is not a digit");

/* use getchar to read each character */
while ( ( c = getchar() ) != '\n') {
sentence[ i++ ] = c;
} /* end while */


Warningsmessages with strerror, ex: printf("%s\n", strerror(1));

strlen counts the number of characters in the string.

printf("%g") skriver ut det som 1.23457e+006
printf("%f") skriver ut det som 1234567.890000

The only valid operations that may be performed on structures are the following: assigning
structure variables to structure variables of the same type, taking the address (&) of a structure
variable, accessing the members of a structure variable (see Section 10.4) and using
the sizeof operator to determine the size of a structure variable.

Sidan 457 bra beskrivning (bild) av filoverforing.

För att den gamla inputen inte ska finnas när användaren skriver in ny input gör ett mellanslag innan c scanf(" %c", &choice); //http://stackoverflow.com/questions/18491390/difference-between-scanfc-c-and-scanf-c-c


S.497 vissar en bild av insert i en linked list.

A string is actually an object of the C++ Standard Library class string.

Two Ways to Provide a Default Constructor for a Class
Any constructor that takes no arguments is called a default constructor. A class gets a default constructor in one of two ways:

1. The compiler implicitly creates a default constructor in a class that does not define a constructor. Such a constructor does not initialize the class’s data members, but does call the default constructor for each data member that is an object of another class. An uninitialized variable typically contains a “garbage” value.

2. You explicitly define a constructor that takes no arguments. Such a default constructor
will call the default constructor for each data member that is an object of
another class and will perform additional initialization specified by you.

The constructor for each of these objects is called when execution reaches the point where that object is declared.

The const qualifier at the end of a member function declaration indicates that the function can be called on objects which are themselves const. const member functions promise not to change the state of any non-mutable data members.
const member functions can also, of course, be called on non-const objects (and still make the same promise).
Member functions can be overloaded on const-ness as well. 

There is an important exception to the rule that each object of a class has its own copy of all the data members of the class. In certain cases, only one copy of a variable should be shared by all objects of a class. A static data member is used for these and other reasons.

By default, an object or variable that is defined outside all blocks has static duration and external linkage. Static duration means that the object or variable is allocated when the program starts and is deallocated when the program ends. (http://msdn.microsoft.com/en-us/library/s1sb61xd.aspx)

Test::Test(int value) : x(value) 
{}

//Equalient to:
/*
Test::Test(int value) {
	x = value;
*/

So, for passing by value,
a copy of an identical object is created with a different reference, and the local variable is assigned the new reference, so to point to the new copy